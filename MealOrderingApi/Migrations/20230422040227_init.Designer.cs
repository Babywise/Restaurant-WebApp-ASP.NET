// <auto-generated />
using System;
using MealOrderingApi.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MealOrderingApi.Migrations
{
    [DbContext(typeof(MealOrderingAPIContext))]
    [Migration("20230422040227_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Meal_Ordering_Class_Library.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            IsDeleted = false,
                            Name = "Burgers"
                        },
                        new
                        {
                            CategoryId = 2,
                            IsDeleted = false,
                            Name = "Sandwiches"
                        },
                        new
                        {
                            CategoryId = 3,
                            IsDeleted = false,
                            Name = "Salads"
                        },
                        new
                        {
                            CategoryId = 4,
                            IsDeleted = false,
                            Name = "Sides"
                        },
                        new
                        {
                            CategoryId = 5,
                            IsDeleted = false,
                            Name = "Drinks"
                        },
                        new
                        {
                            CategoryId = 6,
                            IsDeleted = false,
                            Name = "Alcoholic Beverages"
                        },
                        new
                        {
                            CategoryId = 7,
                            IsDeleted = false,
                            Name = "Desserts"
                        },
                        new
                        {
                            CategoryId = 8,
                            IsDeleted = false,
                            Name = "Specials"
                        });
                });

            modelBuilder.Entity("Meal_Ordering_Class_Library.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            Status = "Cooking",
                            StoreId = 1,
                            Username = "issi"
                        },
                        new
                        {
                            OrderId = 2,
                            Status = "Pending",
                            StoreId = 1,
                            Username = "nick"
                        },
                        new
                        {
                            OrderId = 3,
                            Status = "Cart",
                            StoreId = 1,
                            Username = "issi"
                        },
                        new
                        {
                            OrderId = 4,
                            Status = "Delivered",
                            StoreId = 1,
                            Username = "nick"
                        },
                        new
                        {
                            OrderId = 5,
                            Status = "ODelivery",
                            StoreId = 1,
                            Username = "issi"
                        },
                        new
                        {
                            OrderId = 6,
                            Status = "Preparation",
                            StoreId = 1,
                            Username = "nick"
                        },
                        new
                        {
                            OrderId = 7,
                            Status = "Confirmed",
                            StoreId = 1,
                            Username = "issi"
                        },
                        new
                        {
                            OrderId = 8,
                            Status = "QC",
                            StoreId = 1,
                            Username = "nick"
                        },
                        new
                        {
                            OrderId = 9,
                            Status = "Cooking",
                            StoreId = 1,
                            Username = "nick"
                        },
                        new
                        {
                            OrderId = 10,
                            Status = "Delivered",
                            StoreId = 1,
                            Username = "issi"
                        },
                        new
                        {
                            OrderId = 11,
                            Status = "Preparation",
                            StoreId = 1,
                            Username = "issi"
                        },
                        new
                        {
                            OrderId = 12,
                            Status = "Preparation",
                            StoreId = 1,
                            Username = "issi"
                        },
                        new
                        {
                            OrderId = 13,
                            Status = "Cooking",
                            StoreId = 1,
                            Username = "nick"
                        },
                        new
                        {
                            OrderId = 14,
                            Status = "ODelivery",
                            StoreId = 1,
                            Username = "nick"
                        });
                });

            modelBuilder.Entity("Meal_Ordering_Class_Library.Entities.OrderProduct", b =>
                {
                    b.Property<int>("OrderProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderProductId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderProductId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderProducts");

                    b.HasData(
                        new
                        {
                            OrderProductId = 1,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 2,
                            OrderId = 1,
                            ProductId = 5,
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = 3,
                            OrderId = 1,
                            ProductId = 9,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 4,
                            OrderId = 2,
                            ProductId = 13,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 5,
                            OrderId = 2,
                            ProductId = 18,
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = 6,
                            OrderId = 2,
                            ProductId = 22,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 7,
                            OrderId = 3,
                            ProductId = 27,
                            Quantity = 4
                        },
                        new
                        {
                            OrderProductId = 8,
                            OrderId = 3,
                            ProductId = 31,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 9,
                            OrderId = 3,
                            ProductId = 35,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 10,
                            OrderId = 4,
                            ProductId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 11,
                            OrderId = 4,
                            ProductId = 7,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 12,
                            OrderId = 4,
                            ProductId = 11,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 13,
                            OrderId = 5,
                            ProductId = 15,
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = 14,
                            OrderId = 5,
                            ProductId = 20,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 15,
                            OrderId = 5,
                            ProductId = 24,
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = 16,
                            OrderId = 6,
                            ProductId = 29,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 17,
                            OrderId = 6,
                            ProductId = 33,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 18,
                            OrderId = 7,
                            ProductId = 37,
                            Quantity = 10
                        },
                        new
                        {
                            OrderProductId = 19,
                            OrderId = 8,
                            ProductId = 3,
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = 20,
                            OrderId = 8,
                            ProductId = 6,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 21,
                            OrderId = 8,
                            ProductId = 10,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 22,
                            OrderId = 8,
                            ProductId = 14,
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = 23,
                            OrderId = 8,
                            ProductId = 19,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 24,
                            OrderId = 8,
                            ProductId = 23,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 25,
                            OrderId = 9,
                            ProductId = 28,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 26,
                            OrderId = 9,
                            ProductId = 32,
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = 27,
                            OrderId = 10,
                            ProductId = 36,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 28,
                            OrderId = 10,
                            ProductId = 4,
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = 29,
                            OrderId = 10,
                            ProductId = 8,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 30,
                            OrderId = 10,
                            ProductId = 12,
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = 31,
                            OrderId = 10,
                            ProductId = 17,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 32,
                            OrderId = 11,
                            ProductId = 21,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 33,
                            OrderId = 12,
                            ProductId = 16,
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = 34,
                            OrderId = 13,
                            ProductId = 30,
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = 35,
                            OrderId = 13,
                            ProductId = 34,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 36,
                            OrderId = 13,
                            ProductId = 38,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 37,
                            OrderId = 14,
                            ProductId = 16,
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = 38,
                            OrderId = 14,
                            ProductId = 39,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("Meal_Ordering_Class_Library.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<float?>("Cost")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Cost = 8.99f,
                            Description = "A juicy beef patty served on a freshly baked bun with lettuce, tomato, onion, and pickles.",
                            IsDeleted = false,
                            Name = "Classic Burger",
                            Quantity = 15,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Cost = 11.99f,
                            Description = "Our classic burger with crispy bacon and melted American cheese on top.",
                            IsDeleted = false,
                            Name = "Bacon Cheeseburger",
                            Quantity = 8,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            Cost = 11.99f,
                            Description = "Our classic burger topped with sautéed mushrooms and melted Swiss cheese.",
                            IsDeleted = false,
                            Name = "Mushroom Swiss Burger",
                            Quantity = 6,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            Cost = 8.99f,
                            Description = "A vegetarian patty made with fresh vegetables and spices, topped with lettuce, tomato, onion, and pickles.",
                            IsDeleted = false,
                            Name = "Veggie Burger",
                            Quantity = 6,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1,
                            Cost = 12.49f,
                            Description = " classic burger topped with BBQ sauce, crispy onion rings, and cheddar cheese.",
                            IsDeleted = false,
                            Name = "BBQ Burger",
                            Quantity = 8,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 1,
                            Cost = 13.99f,
                            Description = "Two juicy beef patties with melted American cheese, lettuce, tomato, onion, and pickles.",
                            IsDeleted = false,
                            Name = "Double Cheeseburger",
                            Quantity = 10,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 2,
                            Cost = 13.99f,
                            Description = "Grilled chicken breast served on a freshly baked bun with lettuce, tomato, and mayo.",
                            IsDeleted = false,
                            Name = "Grilled Chicken Sandwich",
                            Quantity = 15,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2,
                            Cost = 7.99f,
                            Description = "Crispy bacon, lettuce, tomato, and mayo served on toasted bread.",
                            IsDeleted = false,
                            Name = "BLT",
                            Quantity = 12,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2,
                            Cost = 9.99f,
                            Description = "Sliced turkey breast and melted Swiss cheese on toasted bread with lettuce, tomato, and mayo. ",
                            IsDeleted = false,
                            Name = "Turkey and Swiss",
                            Quantity = 10,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 2,
                            Cost = 12.99f,
                            Description = " Sliced steak with sautéed onions and melted provolone cheese on a hoagie roll.",
                            IsDeleted = false,
                            Name = "Philly Cheesesteak",
                            Quantity = 8,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 2,
                            Cost = 11.49f,
                            Description = "Sliced turkey, ham, bacon, lettuce, tomato, and mayo on toasted bread.",
                            IsDeleted = false,
                            Name = "Club Sandwich",
                            Quantity = 6,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 2,
                            Cost = 7.99f,
                            Description = "Melted muenster, mozzarella, and parmesan cheese on toasted bread. Served with tomato soup.",
                            IsDeleted = false,
                            Name = "Triple Grilled Cheese With Tomato Soup",
                            Quantity = 6,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 2,
                            Cost = 18.49f,
                            Description = "Chicken breast or breaded tender veal topped with tomato sauce and mozzarella cheese on a tasted ciabatta bun.",
                            IsDeleted = false,
                            Name = "Veal or Chicken Parm Sandwich",
                            Quantity = 8,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 3,
                            Cost = 7.99f,
                            Description = "Crisp romaine lettuce, croutons, bacon, and shaved parmesan cheese with Caesar dressing.",
                            IsDeleted = false,
                            Name = "Caesar Salad",
                            Quantity = 20,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 3,
                            Cost = 6.49f,
                            Description = "Mixed greens, cherry tomatoes, cucumbers, red onion, and carrots with your choice of dressing.",
                            IsDeleted = false,
                            Name = "Garden Salad",
                            Quantity = 15,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 3,
                            Cost = 12.99f,
                            Description = "Mixed greens, grilled chicken, crispy bacon, avocado, cherry tomatoes, hard-boiled egg, and shredded cheese, topped with chipotle aioli.",
                            IsDeleted = false,
                            Name = "Cobb Salad",
                            Quantity = 8,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 3,
                            Cost = 9.99f,
                            Description = "Mixed greens, feta cheese, Kalamata olives, cherry tomatoes, cucumber, and red onion with Greek dressing.",
                            IsDeleted = false,
                            Name = "Greek Salad",
                            Quantity = 12,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 3,
                            Cost = 18.49f,
                            Description = "Fresh greens topped with battered chicken tenders, hearts of palm, artichokes, bacon, and croutons with honey mustard.",
                            IsDeleted = false,
                            Name = "Chicken Tender Salad",
                            Quantity = 15,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 4,
                            Cost = 3.99f,
                            Description = "Crispy golden fries",
                            IsDeleted = false,
                            Name = "French Fries",
                            Quantity = 50,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 4,
                            Cost = 4.99f,
                            Description = "Crispy breaded onion rings.",
                            IsDeleted = false,
                            Name = "Onion Rings",
                            Quantity = 40,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 4,
                            Cost = 4.99f,
                            Description = "Crispy sweet potato fries.",
                            IsDeleted = false,
                            Name = "Sweet Potato Fries",
                            Quantity = 30,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 5,
                            Cost = 3.49f,
                            Description = "Unlimited refills and choices of: Coke, Diet Coke, Sprite, Orange Fanta, Lemonade, or Iced Tea.",
                            IsDeleted = false,
                            Name = "Fountain Drink",
                            Quantity = 40,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 5,
                            Cost = 3.49f,
                            Description = "Unlimited refills",
                            IsDeleted = false,
                            Name = "Coffee or Tea",
                            Quantity = 40,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 24,
                            CategoryId = 5,
                            Cost = 2.49f,
                            Description = "Nestle",
                            IsDeleted = false,
                            Name = "Water Bottle",
                            Quantity = 20,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 25,
                            CategoryId = 6,
                            Cost = 8.99f,
                            Description = "Tequila, triple sec, and lime juice served over ice with a salted rim.",
                            IsDeleted = false,
                            Name = "Margarita",
                            Quantity = 15,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 26,
                            CategoryId = 6,
                            Cost = 10.99f,
                            Description = "Vodka, rum, gin, tequila, triple sec, and lemon juice with a splash of cola served over ice.",
                            IsDeleted = false,
                            Name = "Long Island Iced Tea",
                            Quantity = 12,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 27,
                            CategoryId = 6,
                            Cost = 9.99f,
                            Description = "Rum, lime juice, simple syrup, and fresh mint served over ice.",
                            IsDeleted = false,
                            Name = "Mojito",
                            Quantity = 10,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 28,
                            CategoryId = 6,
                            Cost = 11.99f,
                            Description = "Vodka, triple sec, lime juice, and cranberry juice served up with a twist of orange.",
                            IsDeleted = false,
                            Name = "Cosmopolitan",
                            Quantity = 8,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 29,
                            CategoryId = 6,
                            Cost = 9.99f,
                            Description = "Red or white wine, brandy, fruit juice, and sliced fruit served over ice.",
                            IsDeleted = false,
                            Name = "Sangria",
                            Quantity = 8,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 30,
                            CategoryId = 6,
                            Cost = 6.99f,
                            Description = "Steam Whistle Pilsner, Muskoka Brewery Mad Tom IPA, Beau's Lug Tread Lagered Ale, Amsterdam Brewery Boneshaker IPA, Wellington Brewery SPA (Special Pale Ale)",
                            IsDeleted = false,
                            Name = "Domestic Beer",
                            Quantity = 30,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 31,
                            CategoryId = 6,
                            Cost = 7.99f,
                            Description = "Corona Extra (Mexico), Modelo Especial (Mexico), Heineken (Netherlands), Guinness (Ireland), Sapporo (Japan), Stella Artois (Belgium)",
                            IsDeleted = false,
                            Name = "Imported Beer",
                            Quantity = 30,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 32,
                            CategoryId = 7,
                            Cost = 8.99f,
                            Description = "Warm chocolate cake with a molten chocolate center, served with a scoop of vanilla ice cream",
                            IsDeleted = false,
                            Name = "Chocolate Lava Cake",
                            Quantity = 10,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 33,
                            CategoryId = 7,
                            Cost = 7.99f,
                            Description = "Creamy vanilla cheesecake on a graham cracker crust, topped with a fresh berry compote.",
                            IsDeleted = false,
                            Name = "New York Cheesecake",
                            Quantity = 8,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 34,
                            CategoryId = 7,
                            Cost = 6.99f,
                            Description = "Classic apple pie with a flaky crust, served warm with a scoop of vanilla ice cream.",
                            IsDeleted = false,
                            Name = "Apple Pie",
                            Quantity = 10,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 35,
                            CategoryId = 7,
                            Cost = 9.99f,
                            Description = "Layers of ladyfingers soaked in coffee and rum, with a creamy mascarpone filling and dusted with cocoa powder.",
                            IsDeleted = false,
                            Name = "Tiramisu",
                            Quantity = 7,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 36,
                            CategoryId = 7,
                            Cost = 7.99f,
                            Description = "Warm chocolate brownie topped with a scoop of vanilla ice cream, whipped cream, and chocolate sauce.",
                            IsDeleted = false,
                            Name = "Chocolate Brownie Sundae",
                            Quantity = 13,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 37,
                            CategoryId = 8,
                            Cost = 0f,
                            Description = "Ask your server for details such as a description, price, and availability.",
                            IsDeleted = false,
                            Name = "Soup of the Day",
                            Quantity = 0,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 38,
                            CategoryId = 8,
                            Cost = 0f,
                            Description = "Ask your server for details such as a description, price, and availability.",
                            IsDeleted = false,
                            Name = "Burger of the Day",
                            Quantity = 0,
                            StoreId = 1
                        });
                });

            modelBuilder.Entity("Meal_Ordering_Class_Library.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AccountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Meal_Ordering_Class_Library.Entities.OrderProduct", b =>
                {
                    b.HasOne("Meal_Ordering_Class_Library.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Meal_Ordering_Class_Library.Entities.Product", b =>
                {
                    b.HasOne("Meal_Ordering_Class_Library.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Meal_Ordering_Class_Library.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Meal_Ordering_Class_Library.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meal_Ordering_Class_Library.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Meal_Ordering_Class_Library.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Meal_Ordering_Class_Library.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Meal_Ordering_Class_Library.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
